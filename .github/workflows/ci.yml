name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        check: [prettier, eslint, typescript]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run Prettier check
        if: matrix.check == 'prettier'
        run: npm run prettier:check

      - name: Run ESLint
        if: matrix.check == 'eslint'
        run: npm run lint

      - name: Run TypeScript check
        if: matrix.check == 'typescript'
        run: npm run type-check

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      build-success: ${{ steps.build-status.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci

      - name: Clean previous builds
        run: |
          rm -rf .next out
          if [ -f "next.config.js" ]; then
            rm next.config.js
          fi

      - name: Build project
        id: build-status
        run: |
          npm run build
          echo "success=true" >> $GITHUB_OUTPUT

      - name: Verify build output
        run: |
          if [ ! -d "out" ]; then
            echo "Build failed: out directory not found"
            echo "Available directories:"
            ls -la
            exit 1
          fi
          echo "Build successful: out directory exists with $(ls out | wc -l) files"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output-${{ github.sha }}
          path: out/
          retention-days: 7

      - name: Upload Next.js cache
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-cache-${{ github.sha }}
          path: .next/cache/
          retention-days: 7

  test:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    needs: [setup, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci

      - name: Download build artifacts
        if: needs.build.outputs.build-success == 'true'
        uses: actions/download-artifact@v4
        with:
          name: build-output-${{ github.sha }}
          path: out/

      - name: Check if tests exist
        id: check-tests
        run: |
          if [ -d "src/__tests__" ] || [ -d "tests" ] || [ -d "__tests__" ]; then
            echo "tests-exist=true" >> $GITHUB_OUTPUT
          else
            echo "tests-exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Run tests
        if: steps.check-tests.outputs.tests-exist == 'true'
        run: npm test

      - name: Generate coverage report
        if: steps.check-tests.outputs.tests-exist == 'true'
        run: npm run test:coverage || echo "No coverage script found"

      - name: Upload coverage artifacts
        if: steps.check-tests.outputs.tests-exist == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: coverage/
          retention-days: 30

      - name: Upload coverage to Codecov
        if: steps.check-tests.outputs.tests-exist == 'true'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: No tests found
        if: steps.check-tests.outputs.tests-exist == 'false'
        run: echo "⚠️ No tests found in the project. Consider adding tests for better code quality."

  performance-check:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.build.outputs.build-success == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output-${{ github.sha }}
          path: out/

      - name: Analyze bundle size
        run: |
          echo "## 📊 Build Analysis" >> $GITHUB_STEP_SUMMARY
          echo "### Bundle Size" >> $GITHUB_STEP_SUMMARY
          echo "Total build size: $(du -sh out | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "### File Count" >> $GITHUB_STEP_SUMMARY
          echo "Total files: $(find out -type f | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "### Largest Files" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          find out -type f -exec du -h {} + | sort -rh | head -10 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [code-quality, build, test, performance-check]
    if: always()
    steps:
      - name: Check results
        run: |
          echo "## CI Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅ Pass' || needs.test.result == 'skipped' && '⏭️ Skipped' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance-check.result == 'success' && '✅ Pass' || needs.performance-check.result == 'skipped' && '⏭️ Skipped' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
